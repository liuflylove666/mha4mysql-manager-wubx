#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';

use Getopt::Long;
use MHA::DBHelper;

my (
    $command, $orig_master_host, $orig_master_ip,$ssh_user,
    $orig_master_port, $new_master_host, $new_master_ip,$new_master_port,
    $orig_master_ssh_port,$new_master_ssh_port,$new_master_user,$new_master_password,
    $app_vip, $netmask, $interface
);

GetOptions(
    'command=s'          => \$command,
    'ssh_user=s'         => \$ssh_user,
    'orig_master_host=s' => \$orig_master_host,
    'orig_master_ip=s'   => \$orig_master_ip,
    'orig_master_port=i' => \$orig_master_port,
    'orig_master_ssh_port=i' => \$orig_master_ssh_port,
    'new_master_host=s'  => \$new_master_host,
    'new_master_ip=s'    => \$new_master_ip,
    'new_master_port=i'  => \$new_master_port,
    'new_master_ssh_port=i' => \$new_master_ssh_port,
    'new_master_user=s'     => \$new_master_user,
    'new_master_password=s' => \$new_master_password,
    'app_vip=s'           => \$app_vip,
    'netmask=i'           => \$netmask,
    'interface=s'         => \$interface,

);

my $device = (split(/:/,$interface))[0]; 
my $ssh_start_vip = "ip addr add $app_vip/$netmask dev $interface";
my $ssh_stop_vip = "ip addr delete $app_vip/$netmask dev $interface";
my $ssh_flush_arp = "arping -c 4 -A -I $device $app_vip";

exit &main();

sub main {
    $ssh_user = defined $ssh_user ? $ssh_user : 'root';
    print "\n\nIN SCRIPT TEST====$ssh_user|$ssh_stop_vip==$ssh_user|$ssh_start_vip===\n\n";

    if ( $command eq "stop" || $command eq "stopssh" ) {

        my $exit_code = 1;
        eval {
            print "Disabling the VIP on old master: $orig_master_host \n";
            print "ssh $ssh_user\@$orig_master_host \"$ssh_stop_vip\" \n";
            &stop_vip();
            $exit_code = 0;
        };
        if ($@) {
            warn "Got Error: $@\n";
            exit $exit_code;
        }
        exit $exit_code;
    }
    elsif ( $command eq "start" ) {

        my $exit_code = 10;
        eval {
            my $new_master_handler = new MHA::DBHelper();
            $new_master_handler->connect( $new_master_ip, $new_master_port,
               $new_master_user, $new_master_password, 1 );
            print "Set read_only=0 on the new master.\n";
            $new_master_handler->disable_read_only();
            $new_master_handler->disconnect();
            print "Enabling the VIP - $app_vip on the new master - $new_master_host \n";
            print "ssh $ssh_user\@$new_master_host \"$ssh_start_vip\" \n";
            print "ssh $ssh_user\@$new_master_host \"$ssh_flush_arp\" \n";
            &start_vip();
            &start_arp();
            $exit_code = 0;
        };
        if ($@) {
            warn $@;
            exit $exit_code;
        }
        exit $exit_code;
    }
    elsif ( $command eq "status" ) {
        print "Checking the Status of the script.. OK \n";
        exit 0;
    }
    else {
        &usage();
        exit 1;
    }
}

sub start_vip() {
    `ssh $ssh_user\@$new_master_host \" $ssh_start_vip \"`;
}
sub stop_vip() {
    `ssh $ssh_user\@$orig_master_host \" $ssh_stop_vip \"`;
}

sub start_arp() {
    `ssh $ssh_user\@$new_master_host \" $ssh_flush_arp \"`;
}
sub usage {
    print
    "Usage: master_ip_failover --command=start|stop|stopssh|status --ssh_user=user --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n";
}
